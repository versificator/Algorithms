See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 3 warnings)

Correctness:  20/27 tests passed
Memory:       8/8 tests passed
Timing:       3/4 tests passed

Aggregate score: 79.44%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.5K Jul 16 16:21 Percolation.java
2.0K Jul 16 16:21 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% pmd *.java
*-----------------------------------------------------------
Percolation.java:69: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PercolationStats.java:12: Avoid unused local variables, such as 'percolationStep'. [UnusedLocalVariable]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Percolation.java:6:40: The instance variable 'WQUUF' must start with a lowercase letter and use camelCase. [MemberName]
Checkstyle ends with 0 errors and 1 warnings.

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------
[WARN] PercolationStats.java:1: The number (0) of calls to 'Integer.parseInt()' must equal the number (2) of integer command-line arguments. [CommandLineArgument]
[WARN] PercolationStats.java:1: Use 'StdStats.mean()' to compute the mean. [MethodCallCount]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 15 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Except as noted, a site is opened at most once.

Test 1: Open predetermined list of sites using file inputs
  * filename = input6.txt
  * filename = input8.txt
  * filename = input8-no.txt
  * filename = input10-no.txt
  * filename = greeting57.txt
  * filename = heart25.txt
==> passed

Test 2: Open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 3: Open predetermined sites for n = 1 and n = 2
  * filename = input1.txt
  * filename = input1-no.txt
  * filename = input2.txt
  * filename = input2-no.txt
==> passed

Test 4: Check for backwash with predetermined sites
  * filename = input20.txt
    - isFull() returns wrong value after 231 sites opened
    - student   isFull(18, 1) = true
    - reference isFull(18, 1) = false

    - failed after call 231 to isOpen()

  * filename = input10.txt
    - isFull() returns wrong value after 56 sites opened
    - student   isFull(9, 1) = true
    - reference isFull(9, 1) = false

    - failed after call 56 to isOpen()

  * filename = input50.txt
    - isFull() returns wrong value after 1412 sites opened
    - student   isFull(22, 28) = true
    - reference isFull(22, 28) = false

    - failed after call 1412 to isOpen()

  * filename = jerry47.txt
    - isFull() returns wrong value after 1076 sites opened
    - student   isFull(11, 47) = true
    - reference isFull(11, 47) = false

    - failed after call 1076 to isOpen()

==> FAILED

Test 5: Check for backwash with predetermined sites that have
        multiple percolating paths
  * filename = input3.txt
    - isFull() returns wrong value after 4 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false

    - failed after call 4 to isOpen()

  * filename = input4.txt
    - isFull() returns wrong value after 7 sites opened
    - student   isFull(4, 4) = true
    - reference isFull(4, 4) = false

    - failed after call 7 to isOpen()

  * filename = input7.txt
    - isFull() returns wrong value after 12 sites opened
    - student   isFull(6, 1) = true
    - reference isFull(6, 1) = false

    - failed after call 12 to isOpen()

==> FAILED

Test 6: Open predetermined sites with long percolating path
  * filename = snake13.txt
  * filename = snake101.txt
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed after call 4899 to isOpen()

==> FAILED

Test 7: Open every site
  * filename = input5.txt
==> passed

Test 8: Open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 9: Check that specified exception is thrown if (row, col) is out of bounds
  * n = 10, (row, col) = (0, 6)
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() throws a java.lang.IndexOutOfBoundsException
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (12, 6)
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() throws a java.lang.IndexOutOfBoundsException
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (11, 6)
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() throws a java.lang.IndexOutOfBoundsException
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (6, 0)
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (6, 12)
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (6, 11)
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (-2147483648, -2147483648)
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() throws a java.lang.IndexOutOfBoundsException
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (1000, 1000)
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException
    - isFull() throws a java.lang.IndexOutOfBoundsException
    - isFull() should throw a java.lang.IllegalArgumentException

==> FAILED

Test 10: check that specified exception is thrown if n <= 0 in constructor
  * n = -10
  * n = -1
  * n = 0
  * n = -2147483648
==> passed

Test 11: Create multiple Percolation objects at the same time
         (to make sure you didn't store data in static variables)
==> passed

Test 12: Open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==> passed

Test 13: Call all methods in random order until just before system percolates
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 14: Call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 15: Call all methods in random order until all sites are open,
         allowing open() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - isFull() returns wrong value after 5 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false

    - failed on trial 1 of 40

  * n = 5
    - isFull() returns wrong value after 9 sites opened
    - student   isFull(5, 4) = true
    - reference isFull(5, 4) = false

    - failed on trial 6 of 20

  * n = 7
    - isFull() returns wrong value after 32 sites opened
    - student   isFull(4, 7) = true
    - reference isFull(4, 7) = false

    - failed on trial 2 of 10

  * n = 10
    - isFull() returns wrong value after 51 sites opened
    - student   isFull(10, 2) = true
    - reference isFull(10, 2) = false

    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 250 sites opened
    - student   isFull(11, 4) = true
    - reference isFull(11, 4) = false

    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 1553 sites opened
    - student   isFull(50, 1) = true
    - reference isFull(50, 1) = false

    - failed on trial 1 of 1

==> FAILED


Total: 10/15 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 12 total tests.

Test 1: Check that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: Check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 3: Check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 5: Check that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: Check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
    - PercolationStats confidence low = 0.4756792851980719
    - PercolationStats mean = 0.59875
    - PercolationStats stddev = 0.03942732414061204
    - T = 10
    - student T = 10
    - mean - 1.96 * stddev / sqrt(T)  = 0.5743126913193053
  * n =  50, trials =  20
    - PercolationStats confidence low = 0.522312160843706
    - PercolationStats mean = 0.5913999999999999
    - PercolationStats stddev = 0.024849695539805976
    - T = 20
    - student T = 20
    - mean - 1.96 * stddev / sqrt(T)  = 0.5805091407443528
  * n = 100, trials =  50
    - PercolationStats confidence low = 0.5591009307769519
    - PercolationStats mean = 0.595788
    - PercolationStats stddev = 0.01751797490858916
    - T = 50
    - student T = 50
    - mean - 1.96 * stddev / sqrt(T)  = 0.5909322650905965
  * n =  64, trials = 150
    - PercolationStats confidence low = 0.5666657277886323
    - PercolationStats mean = 0.5911751302083333
    - PercolationStats stddev = 0.02345549277530896
    - T = 150
    - student T = 150
    - mean - 1.96 * stddev / sqrt(T)  = 0.5874214695959504
==> FAILED

Test 7: Check whether exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n = -42, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n =  42, trials =  -1
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

  * n = -2147483648, trials = -2147483648
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 8: Create two PercolationStats objects at the same time and check mean()
        (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
==> passed

Test 9: Check that the methods return the same value, regardless of
        the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: Check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 11: Check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed

Test 12: Check that each site is opened the expected number of times
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed


Total: 10/12 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Memory usage as a function of trials for n = 100
            (max allowed: 8*trials + 128 bytes)

            trials        bytes
--------------------------------------------
=> passed       16          176         
=> passed       32          304         
=> passed       64          560         
=> passed      128         1072         
==> 4/4 tests passed


Estimated student memory = 8.00 T + 48.00   (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)                                                                  
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: Count number of calls to StdStats.mean() and StdStats.stddev()
  * n =  20, trials =  10
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n =  50, trials =  20
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n = 100, trials =  50
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n =  64, trials = 150
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 0
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

==> FAILED

Test 2: Count number of calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 3: Count number of calls to methods in Percolation
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Call PercolationStats methods with trials = 3 and values of n that go up
        by a factor of sqrt(2). The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
       512     0.12       2.2
       724     0.35       3.1
      1024     0.81       2.4
      1448     1.98       2.6
      2048     4.03       2.0
      2896     9.33       2.4
==> passed


Total: 3/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        39704         
=> passed      256       600536         
=> passed      512      2380504         
=> passed     1024      9479384         
==> 4/4 tests passed


Estimated student memory = 9.00 n^2 + 41.00 n + 216.00   (R^2 = 1.000)


Test 2 (bonus): Check that total memory <= 11 n^2 + 128 n + 1024 bytes
   -  bonus available only if solution passes backwash correctness test
==> FAILED


Total: 4/4 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates. Count calls to connected(), union() and
            find() in WeightedQuickUnionUF.

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
=> passed       16          224                   878                   1         
=> passed       32          837                  3424                   1         
=> passed       64         3322                 13178                   1         
=> passed      128        11156                 47674                   1         
=> passed      256        47223                198840                   1         
=> passed      512       183760                781006                   1         
=> passed     1024       736837               3129310                   1         
==> 7/7 tests passed


If one of the values in the table violates the performance limits
the factor by which you failed the test appears in parentheses.
For example, (9.6x) in the union() column indicates that it uses
9.6x too many calls.


Tests 2a-2f: Checks whether the number of calls to union(), connected(), and find()
             is a constant per call to open(), isOpen(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isOpen(), isFull(),
             and percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=> passed       16        4               0               1               1         
=> passed       32        4               0               1               1         
=> passed       64        4               0               1               1         
=> passed      128        4               0               1               1         
=> passed      256        4               0               1               1         
=> passed      512        4               0               1               1         
=> passed     1024        4               0               1               1         
==> 7/7 tests passed



Running time (in seconds) depends on the machine on which the script runs.


Test 3: Create an n-by-n percolation system; interleave calls to open() and
        percolates() until the system percolates. The values of n go up by
        a factor of sqrt(2). The test is passed if n >= 4096.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
      1448     0.37       3.8
      2048     0.76       2.1
      2896     2.30       3.2
      4096     4.73       2.1
==> passed



Test 4: Create an n-by-n percolation system; interleave calls to open(),
        percolates(), isOpen(), isFull(), and numberOfOpenSites() until.
        the system percolates. The values of n go up by a factor of sqrt(2).
        The test is passed if n >= 4096.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
      1024     0.10       2.0
      1448     0.36       3.5
      2048     1.02       3.0
      2896     2.54       2.6
      4096     5.85       2.4
==> passed


Total: 16/16 tests passed!


================================================================




